name: build-image
on:
  pull_request:
  schedule:
    - cron: '0 17 * * *'
  push:
      branches:
        - "main"
  workflow_dispatch:

env:
    IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}

jobs:
  build-and-push:
    name: Build and push image
    runs-on: ubuntu-latest
    permissions: 
      contents: read # required for reading the repo source code
      packages: write # required for publishing packages
      id-token: write # required for logging in to github
    strategy:
      fail-fast: false
      matrix:
        image_name:
          - silverblue
          - hyprland
        major_version: [39]
        build_target: [nonvidia, nvidia]

    steps: 
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Gather environment variables
        shell: bash
        run: |
          echo "SOURCE_ORG=fedora-ostree-desktops" >> $GITHUB_ENV
          if grep "${{ matrix.image_name }}" <<< "silverblue"; then
            echo "SOURCE_IMAGE=${{ matrix.image_name }}" >> $GITHUB_ENV
          else
            echo "SOURCE_IMAGE=base" >> $GITHUB_ENV
          fi

          if [[ "${{ matix.build_target }}" == "nvidia" ]]; then
            export IMAGE_FLAVOR=nvidia
          else
            export IMAGE_FLAVOR=nonvidia
          fi
          echo "IMAGE_NAME=timesink-${{ matrix.image_name }}-${IMAGE_FLAVOR}" >> $GITHUB_ENV

      - name: Image Metadata
        uses: docker/metadata-action@v5
        id: meta
        with:
          images: |
            ${{ env.IMAGE_NAME }}
          labels: |
            org.opencontainers.image.title=${{ env.IMAGE_NAME }}
            org.opencontainers.image.description=${{ env.IMAGE_NAME }}

      - name: Generate tags
        id: generate-tags
        shell: bash
        run: |
          TAGS=()
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            TAGS+=("pr-${{ github.event.number }}")
          else
            TAGS+=("$(date +%Y%m%d)")
            TAGS+=("latest")
          fi
          echo "Publishing with the following tags: "
          echo "${TAGS[*]}"
          
          echo "TAGS=${TAGS[*]}" >> $GITHUB_OUTPUT

      - name: Pull base image
        uses: Wandalen/wretry.action@v2.1.0
        with:
          attempt_limit: 3
          attempt_delay: 15000
          command: |
            podman pull quay.io/${{ env.SOURCE_ORG }}/${{ env.SOURCE_IMAGE }}:${{ matrix.major_version }}

      - name: Retrieve akmods signing keys
        run: |
          mkdir certs
          echo "${{ secrets.AKMOD_PUBKEY }}" | base64 --decode > certs/public_key.der
          echo "${{ secrets.AKMOD_PRIVKEY }}" > certs/private_key.priv

      - name: Build Image
        id: build_image
        uses: redhat-actions/buildah-build@v2.13
        with:
          containerfiles: |
            ./Containerfile
          image: ${{ env.IMAGE_NAME }} # names the built image
          tags: ${{ steps.generate-tags.outputs.TAGS }} # pulls in tags from previous step
          build-args: |
            IMAGE_NAME=${{ matrix.image_name }}
            SOURCE_ORG=${{ env.SOURCE_ORG }}
            SOURCE_IMAGE=${{ env.SOURCE_IMAGE }}
            FEDORA_MAJOR_VERSION=${{ matrix.major_version }}
          labels: ${{ steps.meta.outputs.labels }} # pulls in labels from previous step
          oci: false # don't use OCI metadata format instead of the Docker format (false by default)

      - name: Lowercase Registry
        id: registry_case
        uses: ASzc/change-string-case-action@v6
        with:
          string: ${{ env.IMAGE_REGISTRY }}

      - name: Push To GHCR
        uses: Wandalen/wretry.action@v2.1.0
        id: push
        env: # set user and pass to use for logging in to GHCR
          REGISTRY_USER: ${{ github.actor }}
          REGISTRY_PASSWORD: ${{ github.token }}
        with:
          action: redhat-actions/push-to-registry@v2.8
          attempt_limit: 3
          attempt_delay: 15000
          with: |
            image: ${{ steps.build_image.outputs.image }} # pulls in the newly built image from previous step
            tags: ${{ steps.build_image.outputs.tags }} # pulls in tags from previous step
            registry: ${{ steps.registry_case.outputs.lowercase }} # pulls in lowercased image registry string from previous step
            username: ${{ env.REGISTRY_USER }}
            password: ${{ env.REGISTRY_PASSWORD }}

      - name: Login to GHCR
        uses: docker/login-action@v3
        if: github.event_name != 'pull_request' # signing disabled for PRs because PRs from outside repos wont have access to your signing secret
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: sigstore/cosign-installer@v3.4.0
        if: github.event_name != 'pull_request' # signing disabled for PRs because PRs from outside repos wont have access to your signing secret

      - name: Sign container image
        if: github.event_name != 'pull_request' # signing disabled for PRs because PRs from outside repos wont have access to your signing secret
        env:
          TAGS: ${{ steps.push.outputs.outputs && fromJSON(steps.push.outputs.outputs).digest }} # hash of the new image, to make sure we sign the right one
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.SIGNING_SECRET }}
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ steps.registry_case.outputs.lowercase }}/${{ env.IMAGE_NAME }}@${TAGS}
